/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChallengeService } from "../challenge.service";
import { ChallengeCreateInput } from "./ChallengeCreateInput";
import { Challenge } from "./Challenge";
import { ChallengeFindManyArgs } from "./ChallengeFindManyArgs";
import { ChallengeWhereUniqueInput } from "./ChallengeWhereUniqueInput";
import { ChallengeUpdateInput } from "./ChallengeUpdateInput";
import { SubmissionFindManyArgs } from "../../submission/base/SubmissionFindManyArgs";
import { Submission } from "../../submission/base/Submission";
import { SubmissionWhereUniqueInput } from "../../submission/base/SubmissionWhereUniqueInput";

export class ChallengeControllerBase {
  constructor(protected readonly service: ChallengeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Challenge })
  async createChallenge(
    @common.Body() data: ChallengeCreateInput
  ): Promise<Challenge> {
    return await this.service.createChallenge({
      data: {
        ...data,

        track: data.track
          ? {
              connect: data.track,
            }
          : undefined,
      },
      select: {
        attachments: true,
        createdAt: true,
        description: true,
        id: true,
        points: true,

        track: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Challenge] })
  @ApiNestedQuery(ChallengeFindManyArgs)
  async challenges(@common.Req() request: Request): Promise<Challenge[]> {
    const args = plainToClass(ChallengeFindManyArgs, request.query);
    return this.service.challenges({
      ...args,
      select: {
        attachments: true,
        createdAt: true,
        description: true,
        id: true,
        points: true,

        track: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Challenge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async challenge(
    @common.Param() params: ChallengeWhereUniqueInput
  ): Promise<Challenge | null> {
    const result = await this.service.challenge({
      where: params,
      select: {
        attachments: true,
        createdAt: true,
        description: true,
        id: true,
        points: true,

        track: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Challenge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChallenge(
    @common.Param() params: ChallengeWhereUniqueInput,
    @common.Body() data: ChallengeUpdateInput
  ): Promise<Challenge | null> {
    try {
      return await this.service.updateChallenge({
        where: params,
        data: {
          ...data,

          track: data.track
            ? {
                connect: data.track,
              }
            : undefined,
        },
        select: {
          attachments: true,
          createdAt: true,
          description: true,
          id: true,
          points: true,

          track: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Challenge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChallenge(
    @common.Param() params: ChallengeWhereUniqueInput
  ): Promise<Challenge | null> {
    try {
      return await this.service.deleteChallenge({
        where: params,
        select: {
          attachments: true,
          createdAt: true,
          description: true,
          id: true,
          points: true,

          track: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/submissions")
  @ApiNestedQuery(SubmissionFindManyArgs)
  async findSubmissions(
    @common.Req() request: Request,
    @common.Param() params: ChallengeWhereUniqueInput
  ): Promise<Submission[]> {
    const query = plainToClass(SubmissionFindManyArgs, request.query);
    const results = await this.service.findSubmissions(params.id, {
      ...query,
      select: {
        challenge: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        link: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/submissions")
  async connectSubmissions(
    @common.Param() params: ChallengeWhereUniqueInput,
    @common.Body() body: SubmissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      submissions: {
        connect: body,
      },
    };
    await this.service.updateChallenge({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/submissions")
  async updateSubmissions(
    @common.Param() params: ChallengeWhereUniqueInput,
    @common.Body() body: SubmissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      submissions: {
        set: body,
      },
    };
    await this.service.updateChallenge({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/submissions")
  async disconnectSubmissions(
    @common.Param() params: ChallengeWhereUniqueInput,
    @common.Body() body: SubmissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      submissions: {
        disconnect: body,
      },
    };
    await this.service.updateChallenge({
      where: params,
      data,
      select: { id: true },
    });
  }
}
