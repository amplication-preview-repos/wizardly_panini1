/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Challenge } from "./Challenge";
import { ChallengeCountArgs } from "./ChallengeCountArgs";
import { ChallengeFindManyArgs } from "./ChallengeFindManyArgs";
import { ChallengeFindUniqueArgs } from "./ChallengeFindUniqueArgs";
import { CreateChallengeArgs } from "./CreateChallengeArgs";
import { UpdateChallengeArgs } from "./UpdateChallengeArgs";
import { DeleteChallengeArgs } from "./DeleteChallengeArgs";
import { SubmissionFindManyArgs } from "../../submission/base/SubmissionFindManyArgs";
import { Submission } from "../../submission/base/Submission";
import { Track } from "../../track/base/Track";
import { ChallengeService } from "../challenge.service";
@graphql.Resolver(() => Challenge)
export class ChallengeResolverBase {
  constructor(protected readonly service: ChallengeService) {}

  async _challengesMeta(
    @graphql.Args() args: ChallengeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Challenge])
  async challenges(
    @graphql.Args() args: ChallengeFindManyArgs
  ): Promise<Challenge[]> {
    return this.service.challenges(args);
  }

  @graphql.Query(() => Challenge, { nullable: true })
  async challenge(
    @graphql.Args() args: ChallengeFindUniqueArgs
  ): Promise<Challenge | null> {
    const result = await this.service.challenge(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Challenge)
  async createChallenge(
    @graphql.Args() args: CreateChallengeArgs
  ): Promise<Challenge> {
    return await this.service.createChallenge({
      ...args,
      data: {
        ...args.data,

        track: args.data.track
          ? {
              connect: args.data.track,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Challenge)
  async updateChallenge(
    @graphql.Args() args: UpdateChallengeArgs
  ): Promise<Challenge | null> {
    try {
      return await this.service.updateChallenge({
        ...args,
        data: {
          ...args.data,

          track: args.data.track
            ? {
                connect: args.data.track,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Challenge)
  async deleteChallenge(
    @graphql.Args() args: DeleteChallengeArgs
  ): Promise<Challenge | null> {
    try {
      return await this.service.deleteChallenge(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Submission], { name: "submissions" })
  async findSubmissions(
    @graphql.Parent() parent: Challenge,
    @graphql.Args() args: SubmissionFindManyArgs
  ): Promise<Submission[]> {
    const results = await this.service.findSubmissions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Track, {
    nullable: true,
    name: "track",
  })
  async getTrack(@graphql.Parent() parent: Challenge): Promise<Track | null> {
    const result = await this.service.getTrack(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
