/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JudgeService } from "../judge.service";
import { JudgeCreateInput } from "./JudgeCreateInput";
import { Judge } from "./Judge";
import { JudgeFindManyArgs } from "./JudgeFindManyArgs";
import { JudgeWhereUniqueInput } from "./JudgeWhereUniqueInput";
import { JudgeUpdateInput } from "./JudgeUpdateInput";

export class JudgeControllerBase {
  constructor(protected readonly service: JudgeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Judge })
  async createJudge(@common.Body() data: JudgeCreateInput): Promise<Judge> {
    return await this.service.createJudge({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Judge] })
  @ApiNestedQuery(JudgeFindManyArgs)
  async judges(@common.Req() request: Request): Promise<Judge[]> {
    const args = plainToClass(JudgeFindManyArgs, request.query);
    return this.service.judges({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Judge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async judge(
    @common.Param() params: JudgeWhereUniqueInput
  ): Promise<Judge | null> {
    const result = await this.service.judge({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Judge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJudge(
    @common.Param() params: JudgeWhereUniqueInput,
    @common.Body() data: JudgeUpdateInput
  ): Promise<Judge | null> {
    try {
      return await this.service.updateJudge({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Judge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJudge(
    @common.Param() params: JudgeWhereUniqueInput
  ): Promise<Judge | null> {
    try {
      return await this.service.deleteJudge({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
