/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Judge as PrismaJudge,
  User as PrismaUser,
} from "@prisma/client";

export class JudgeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.JudgeCountArgs, "select">): Promise<number> {
    return this.prisma.judge.count(args);
  }

  async judges(args: Prisma.JudgeFindManyArgs): Promise<PrismaJudge[]> {
    return this.prisma.judge.findMany(args);
  }
  async judge(args: Prisma.JudgeFindUniqueArgs): Promise<PrismaJudge | null> {
    return this.prisma.judge.findUnique(args);
  }
  async createJudge(args: Prisma.JudgeCreateArgs): Promise<PrismaJudge> {
    return this.prisma.judge.create(args);
  }
  async updateJudge(args: Prisma.JudgeUpdateArgs): Promise<PrismaJudge> {
    return this.prisma.judge.update(args);
  }
  async deleteJudge(args: Prisma.JudgeDeleteArgs): Promise<PrismaJudge> {
    return this.prisma.judge.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.judge
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
