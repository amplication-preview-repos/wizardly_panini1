/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Judge } from "./Judge";
import { JudgeCountArgs } from "./JudgeCountArgs";
import { JudgeFindManyArgs } from "./JudgeFindManyArgs";
import { JudgeFindUniqueArgs } from "./JudgeFindUniqueArgs";
import { CreateJudgeArgs } from "./CreateJudgeArgs";
import { UpdateJudgeArgs } from "./UpdateJudgeArgs";
import { DeleteJudgeArgs } from "./DeleteJudgeArgs";
import { User } from "../../user/base/User";
import { JudgeService } from "../judge.service";
@graphql.Resolver(() => Judge)
export class JudgeResolverBase {
  constructor(protected readonly service: JudgeService) {}

  async _judgesMeta(
    @graphql.Args() args: JudgeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Judge])
  async judges(@graphql.Args() args: JudgeFindManyArgs): Promise<Judge[]> {
    return this.service.judges(args);
  }

  @graphql.Query(() => Judge, { nullable: true })
  async judge(
    @graphql.Args() args: JudgeFindUniqueArgs
  ): Promise<Judge | null> {
    const result = await this.service.judge(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Judge)
  async createJudge(@graphql.Args() args: CreateJudgeArgs): Promise<Judge> {
    return await this.service.createJudge({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Judge)
  async updateJudge(
    @graphql.Args() args: UpdateJudgeArgs
  ): Promise<Judge | null> {
    try {
      return await this.service.updateJudge({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Judge)
  async deleteJudge(
    @graphql.Args() args: DeleteJudgeArgs
  ): Promise<Judge | null> {
    try {
      return await this.service.deleteJudge(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Judge): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
